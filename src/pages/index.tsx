import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { Canvas, useFrame } from "@react-three/fiber";
import { OrthographicCamera } from "@react-three/drei";
import { Mesh, PlaneGeometry, ShaderMaterial } from "three";
import { useMemo, useRef, useState } from "react";

const inter = Inter({ subsets: ["latin"] });

const MainView = ({ mousePosition }: { mousePosition: number[]}) => {

  const meshRef = useRef();

  // ジオメトリの作成
  const geometry = useMemo(() => new PlaneGeometry(2, 2), []);

  // マテリアルの作成
  const mat = useMemo(() => new ShaderMaterial({
    vertexShader:
      `
      varying vec2 vUv;
      void main() {
        vUv = uv;
        //vec4 worldPosition = modelMatrix * vec4( position, 1.0 );
        //vec4 mvPosition =  viewMatrix * worldPosition;
        //gl_Position = projectionMatrix * mvPosition;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
      `,
    fragmentShader:
      `
      uniform float time;
      uniform vec2 mousePosition;
      varying vec2 vUv;
      void main() {
        gl_FragColor = vec4(vUv.x, vUv.y, mousePosition.x, 1.0);
      }
      `,
    uniforms: {
      time: { value: 0 },
      mousePosition: { value: [0, 0] },
      // その他のユニフォームを追加
    },
  }), []);

  // アニメーションループ
  useFrame((state, delta, xrFrame) => {
    if (!meshRef.current) return;
    (meshRef.current as Mesh).material.uniforms.time.value += delta;
    //(meshRef.current as Mesh).rotation.y += 0.01;
    (meshRef.current as Mesh).material.uniforms.mousePosition.value = mousePosition;
  })

  return (
    <OrthographicCamera makeDefault position={[0, 0, 0]} left={-1} right={1} top={-1} bottom={1} near={0.1} far={1000} >
      <mesh
        ref={meshRef}
        material={mat}
        position={[0, 0, -1]}
        rotation={[Math.PI, 0, 0]}
        geometry={geometry}
      />
    </OrthographicCamera>
  );
}

export default function Home() {
  const [mousePosition, setMousePosition] = useState([0, 0]);
  const canvasRef = useRef();
  const onMouseMove = (e) => {
    console.log(canvasRef.current.clientWidth, canvasRef.current.clientHeight)
    setMousePosition([e.clientX / canvasRef.current.clientWidth, e.clientY / canvasRef.current.clientHeight]);
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.gameview}>
          <Canvas flat onMouseMove={onMouseMove} ref={canvasRef}>
            <MainView mousePosition={mousePosition}></MainView>
          </Canvas>
        </div>
      </main>
    </>
  );
}
